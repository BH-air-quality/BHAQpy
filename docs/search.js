window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "BHAQpy", "modulename": "BHAQpy", "type": "module", "doc": "<p>Buro Happold Air Quality py.</p>\n\n<p>Seemlessly integrate python, QGIS and other air quality utilities.</p>\n\n<p>@author: kbenjamin</p>\n"}, {"fullname": "BHAQpy.aqgisproject", "modulename": "BHAQpy.aqgisproject", "type": "module", "doc": "<p>Created on Thu Mar 31 09:46:07 2022</p>\n\n<p>@author: kbenjamin</p>\n"}, {"fullname": "BHAQpy.aqgisproject.AQgisProjectBasemap", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProjectBasemap", "type": "class", "doc": "<p>QGIS basemap object with all required basemap layers</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>project_path</strong> (str):\nThe path to the project file</li>\n<li><strong>run_environment</strong> (str):\nEither standalone or qgis_app. Standalone if running from a python script, \nqgis_app if running from qgis interface. Currently only standalone is supported.</li>\n<li><strong>qgs_app</strong> ():\nThe details of the QGIS process that is running</li>\n<li><strong>project_name</strong> (str):\nThe name of the project</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>get_project()\n    returns the qgis project (see <a href=\"https://qgis.org/pyqgis/3.0/core/Project/QgsProject.html\">https://qgis.org/pyqgis/3.0/core/Project/QgsProject.html</a>)</p>\n\n<p>initialise_project(project_name, project_path, site_geom_source, clip_distance = 10000)\n    create a new qgis project with clipped layers around a project site, saved to a single geopackage</p>\n"}, {"fullname": "BHAQpy.aqgisproject.AQgisProjectBasemap.__init__", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProjectBasemap.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>project_path</strong> (str):\nThe path to a qgis project.</li>\n<li><strong>run_environment</strong> (TYPE, optional):\nEither standalone or qgis_app. Standalone if running from a python script, \nqgis_app if running from qgis interface. Currently only standalone is supported.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, project_path, run_environment='standalone')", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProjectBasemap.get_project", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProjectBasemap.get_project", "type": "function", "doc": "<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>qgis.core.QgsProject</strong>: The qgis project (see https://qgis.org/pyqgis/3.0/core/Project/QgsProject.html).\nFrom here the PyQGIS api can be used to edit and test the qgis project.</li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProjectBasemap.initialise_project", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProjectBasemap.initialise_project", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>project_name</strong> (str):\nName of the project to be initialised.</li>\n<li><strong>project_path</strong> (str):\nThe full project path for the project to be saved to.</li>\n<li><strong>site_geom_source</strong> (str):\nA path to a shapefile or layer name within the basemap project containing the site geometry.</li>\n<li><strong>clip_distance</strong> (int, optional):\nHow far around the site to clip base layers. The default is 10000.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>new_ADMSQ_project</strong> (AQgisProject):\nA QGIS project with all clipped base layers and site geometry.</li>\n</ul>\n", "signature": "(\n    self,\n    project_name,\n    project_path,\n    site_geom_source,\n    clip_distance=10000\n)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject", "type": "class", "doc": "<p>Core class for an air quality QGIS project. Controls any functionality relating to a full project.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>project_path</strong> (str):\nThe path to the project file</li>\n<li><strong>run_environment</strong> (str):\nEither standalone or qgis_app. Standalone if running from a python script, \nqgis_app if running from qgis interface.</li>\n<li><strong>qgs_app</strong> ():\nThe details of the QGIS process that is running</li>\n<li><strong>project_name</strong> (str):\nThe name of the project</li>\n<li><strong>gpkg_path</strong> (str):\nThe path to the geopackage containing project layers</li>\n<li><strong>modelled_roads_layer_name</strong> (str):\nThe name of the layer within the project that represents the modelled roads to be imported into ADMS.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>set_gpkg_path()\n    set the gpkg_path associated with the project, containing all project layers</p>\n\n<p>set_site_geom()\n    set the site geometry layer or file containing geometry for project</p>\n\n<p>get_site_background_concs()\n    get the defra modelled background concentration at the set_geom</p>\n\n<p>create_site_buffer()\n    create a buffer layer around site geom.</p>\n\n<p>add_construction_buffers()\n    Create construction buffers around site geom.</p>\n\n<p>init_modelled_roads()\n    initialise a ModelledRoads object for the project. This is the QGIS version of roads to be imported into ADMS. </p>\n\n<p>clip_layer_around_site()\n    clip a specified layer around site_geom</p>\n\n<p>add_monitoring_sites()\n    add monioting sites to project. TODO.</p>\n\n<p>save()\n    write QGIS project</p>\n\n<p>add_layer()\n    add a layer to the QGIS project</p>\n\n<p>remove_layer()\n    remove a layer from the QGIS project</p>\n", "bases": "AQgisProjectBasemap"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.__init__", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>project_path</strong> (str):\nFull project path to the QGIS project file.</li>\n<li><strong>run_environment</strong> (str, optional):\nEither standalone or qgis_app. Standalone if running from a python script, \nqgis_app if running from qgis interface. The default is \"qgis_gui\". The default is \"qgis_gui\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, project_path, run_environment='standalone')", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.set_gpkg_path", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.set_gpkg_path", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><p><strong>project_gpkg_path</strong> (str):</p></li>\n<li><p><strong>Set the path to the geopackage file associated with the project.</strong></p></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, project_gpkg_path)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.set_site_geom", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.set_site_geom", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>site_geom_source</strong> (str):\nA path to a shapefile or layer name within the basemap project containing the geometry of a project site.\ne.g. BuroHappold/Environment - 07 Air Quality/1. Projects/22/PROJECT NAME/4. GIS/Red Line Boundary.shp</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>site_geometry</strong> (QgsVectorLayer):\nVector layer containing the site geometry.</li>\n</ul>\n", "signature": "(self, site_geom_source)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.get_site_background_concs", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.get_site_background_concs", "type": "function", "doc": "<p>Get defra background concentrations at the project site from <a href=\"https://uk-air.defra.gov.uk/data/laqm-background-maps?year=2018\">https://uk-air.defra.gov.uk/data/laqm-background-maps?year=2018</a></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>background_region</strong> (str):\nBackground region as defined in defra background maps. \nOptions: Greater_London, East_of_England, Midlands, Northern_England,\nNorthern_Ireland, Scotland, Southern_England, Wales.</li>\n<li><strong>year</strong> (int):\nThe background year to get.</li>\n<li><strong>pollutants</strong> (list, optional):\nPollutants to get background concentrations for. The default is ['no2', 'nox', 'pm10', 'pm25'].</li>\n<li><strong>base_year</strong> (int, optional):\nBase year of modelled background concentrations. The default is '2018'.</li>\n<li><strong>split_by_source</strong> (Bool, optional):\nWhether to split contributions of background concentrations into sources. The default is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>site_background_concs</strong> (pandas.DataFrame):\nPandas dataframe with background concentrations for grid square(s) site falls within</li>\n</ul>\n", "signature": "(\n    self,\n    background_region,\n    year,\n    pollutants=['no2', 'nox', 'pm10', 'pm25'],\n    base_year='2018',\n    split_by_source=False\n)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.create_site_buffer", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.create_site_buffer", "type": "function", "doc": "<p>Create a QGIS layer of a buffer around site geometery.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>buffer_size</strong> (float):\nDistance from site to create a buffer around.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>buffer_layer</strong> (QgsVectorLayer):\nQGIS vector layer of buffer_size distance around the site geometry.</li>\n</ul>\n", "signature": "(self, buffer_size)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.add_construction_buffers", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.add_construction_buffers", "type": "function", "doc": "<p>Add construction buffers to a project </p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>buffer_distances</strong> (list, optional):\nThe distance (in m) to create buffers for. The default is [20,50,100,350].</li>\n<li><strong>layer_group</strong> (str, optional):\nThe layer group within the project to add the buffer layers to. The default is \"Dist from Site\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Saves construction buffers of the specified buffer_distances to the project.</strong></li>\n</ul>\n", "signature": "(\n    self,\n    buffer_distances=[20, 50, 100, 350],\n    layer_group='Dist from Site'\n)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.init_modelled_roads", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.init_modelled_roads", "type": "function", "doc": "<p>Initialise a modelled roads object in this project</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>modelled_roads_layer_name</strong> (str, optional):\nThe layer name of the existing modelled roads file. If None then a new layer is created. The default is None.</li>\n<li><strong>gpkg_write_path</strong> (str, optional):\nPath to geopackage at which modelled roads layer is saved. The default is self.geopackage_write_path, else 'modelled_roads.gpkg'.</li>\n<li><strong>traffic_count_point_id_col_name</strong> (str, optional):\nThe attribute name representing the traffic count point ID. The default is 'TCP ID'.</li>\n<li><strong>width_col_name</strong> (str, optional):\nThe attribute name representing the road width in m. The default is 'Width'.</li>\n<li><strong>speed_col_name</strong> (str, optional):\nThe attribute name representing the traffic speed in kph. The default is 'Speed'.</li>\n<li><strong>overwrite_gpkg_layer</strong> (bool, optional):\nIf geopackage layer exists already, should this be overwritten. The default is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>modelled_roads</strong> (BHAQpy.ModelledRoads):\nA ModelledRoads object. A number of functions can be carried out on.</li>\n</ul>\n", "signature": "(\n    self,\n    modelled_roads_layer_name=None,\n    gpkg_write_path='modelled_roads.gpkg',\n    traffic_count_point_id_col_name='TCP ID',\n    width_col_name='Width',\n    speed_col_name='Speed',\n    overwrite_gpkg_layer=False\n)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.clip_layer_around_site", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.clip_layer_around_site", "type": "function", "doc": "<p>clip a layer around site geometry for a specified distance</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>clip_layer</strong> (str):\nName of the layer within the project to clip.</li>\n<li><strong>clip_layer_source</strong> (str):\nPath to the file containing the layer to be clipped.</li>\n<li><strong>gpkg_write_path</strong> (str):\nThe path to write the clipped laeyr to.</li>\n<li><strong>clip_bounding_box</strong> (list, optional):\nSpecified x_min, x_max, y_min and y_max coordinates to clip to. If None then a bounding box is created using clip_distance. The default is None.</li>\n<li><strong>clip_distance</strong> (int, optional):\nThe distance from the site geomoetery to clip layer to in metres. The default is 10000.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: DESCRIPTION.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>TYPE</strong>: DESCRIPTION.</li>\n</ul>\n", "signature": "(\n    self,\n    clip_layer,\n    clip_layer_source,\n    gpkg_write_path,\n    clip_bounding_box=None,\n    clip_distance=10000\n)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.add_monitoring_sites", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.add_monitoring_sites", "type": "function", "doc": "<p>TODO</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>monitoring_shp_files</strong> (TYPE):\nDESCRIPTION.</li>\n</ul>\n\n<h6 id=\"raises\">Raises</h6>\n\n<ul>\n<li><strong>Exception</strong>: DESCRIPTION.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, monitoring_shp_files)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.save", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.save", "type": "function", "doc": "<p>write changes to a project</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.add_layer", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.add_layer", "type": "function", "doc": "<p>Add a QGIS layer to a project</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>layer</strong> (qgis.core.QgsVectorLayer):\nThe pyqgis layer to add to a project.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, layer)", "funcdef": "def"}, {"fullname": "BHAQpy.aqgisproject.AQgisProject.remove_layer", "modulename": "BHAQpy.aqgisproject", "qualname": "AQgisProject.remove_layer", "type": "function", "doc": "<p>Remove a QGIS layer from a project</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>layer</strong> (qgis.core.QgsVectorLayer):\nThe pyqgis layer to remove from a project.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(self, layer)", "funcdef": "def"}, {"fullname": "BHAQpy.aqmonitoring", "modulename": "BHAQpy.aqmonitoring", "type": "module", "doc": "<p></p>\n"}, {"fullname": "BHAQpy.aqmonitoring.AQMonitoring", "modulename": "BHAQpy.aqmonitoring", "qualname": "AQMonitoring", "type": "class", "doc": "<p>TODO</p>\n"}, {"fullname": "BHAQpy.aqmonitoring.AQMonitoring.__init__", "modulename": "BHAQpy.aqmonitoring", "qualname": "AQMonitoring.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    source,\n    x_col_name='X (m)',\n    y_col_name='Y (m)',\n    delim=',',\n    crs='epsg:27700'\n)", "funcdef": "def"}, {"fullname": "BHAQpy.getdefrabackground", "modulename": "BHAQpy.getdefrabackground", "type": "module", "doc": "<p>Created on Thu Mar 17 11:46:13 2022</p>\n\n<p>@author: kbenjamin</p>\n"}, {"fullname": "BHAQpy.getdefrabackground.get_defra_background_concentrations", "modulename": "BHAQpy.getdefrabackground", "qualname": "get_defra_background_concentrations", "type": "function", "doc": "<p>Get defra modelled background concentrations at specified coordinates.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>coordinates</strong> (list):\nList of coordinates representing a singular point or a maximum and minimum extent. Must be in epsg:27700 crs. e.g. [5000, 7000] or [[50000, 70000], [51000, 71000]]</li>\n<li><strong>background_region</strong> (str):\nBackground region as defined in defra background maps. Options: Greater_London, East_of_England, Midlands, Northern_England, Northern_Ireland, Scotland, Southern_England, Wales.</li>\n<li><strong>year</strong> (int):\nDESCRIPTION.</li>\n<li><strong>year</strong> (int):\nThe background year to get.</li>\n<li><strong>pollutants</strong> (list, optional):\nPollutants to get background concentrations for. The default is ['no2', 'nox', 'pm10', 'pm25'].</li>\n<li><strong>base_year</strong> (int, optional):\nBase year of modelled background concentrations. The default is '2018'.</li>\n<li><strong>split_by_source</strong> (Bool, optional):\nWhether to split contributions of background concentrations into sources. The default is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>background_concentrations</strong> (pandas.DataFrame):\nDataframe of background concentrations at grid square(s) coordinates are within.</li>\n</ul>\n", "signature": "(\n    coordinates: list,\n    background_region: str,\n    year: int,\n    pollutants=['no2', 'nox', 'pm10', 'pm25'],\n    base_year='2018',\n    split_by_source=False\n)", "funcdef": "def"}, {"fullname": "BHAQpy.modelledroads", "modulename": "BHAQpy.modelledroads", "type": "module", "doc": "<p>Created on Wed Mar 30 11:10:56 2022</p>\n\n<p>@author: kbenjamin</p>\n"}, {"fullname": "BHAQpy.modelledroads.ModelledRoads", "modulename": "BHAQpy.modelledroads", "qualname": "ModelledRoads", "type": "class", "doc": "<p>A BHAQpy object representing the roads data in QGIS that should be manipulated and imported into an ADMS model</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>project</strong> (BHAQpy.AQgisProject):\nThe AQgisProject in which the modelled roads correspond to</li>\n<li><strong>gpkg_write_path</strong> (str):\nWhere the modelled roads layer is written to.</li>\n<li><strong>layer</strong> (QGSVectorLayer):\nThe pyqgis layer for the modelled roads object</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>get_attributes_df()\n    get a pandas datarame of road attributes</p>\n\n<p>match_to_TCP()\n    Match road geomtry to traffic count point information.</p>\n\n<p>generate_SPT()\n    create an ADMS spt file for the drawn roads</p>\n\n<p>generate_VGT()\n    create a vgt file for the drawn roads</p>\n\n<p>generate_EFT_input()\n    generate a file that can be copied directly into EFT spreadsheet</p>\n\n<p>generate_EIT()\n    create an eit file for the drawn roads</p>\n\n<p>calculate_gradients()\n    calculate the gradient of the drawn roads. This can then be used in EFT calculations.</p>\n"}, {"fullname": "BHAQpy.modelledroads.ModelledRoads.__init__", "modulename": "BHAQpy.modelledroads", "qualname": "ModelledRoads.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>project</strong> (BHAQpy.AQgisProject):\nThe AQgisProject in which the modelled roads are added to</li>\n<li><strong>source</strong> (str, optional):\nThe layer within a project or the path to a file containing drawn modelled roads. If None then a new layer is created. The default is None.</li>\n<li><strong>gpkg_write_path</strong> (str, optional):\nThe path to the geopackage where the modelled roads layer will be written. The default is 'modelled_roads.gpkg'.</li>\n<li><strong>gpkg_layer_name</strong> (str, optional):\nThe name of the geopackage layer the modelled roads will be saved to. The default is 'Modelled Roads ADMS'.</li>\n<li><strong>traffic_count_point_id_col_name</strong> (str, optional):\nThe attribute name representing the traffic count point ID. The default is 'TCP ID'.</li>\n<li><strong>width_col_name</strong> (str, optional):\nThe attribute name representing the road width in m. The default is 'Width'.</li>\n<li><strong>speed_col_name</strong> (str, optional):\nThe attribute name representing the traffic speed in kph. The default is 'Speed'.</li>\n<li><strong>junction_col_name</strong> (str, optional):\nThe attribute name representing the boolean value determining if the link is a junction. The default is 'Junction'.</li>\n<li><strong>road_height_col_name</strong> (str, optional):\nThe attribute name representing the road height in metres. The default is 'Height'.</li>\n<li><strong>canyon_height_col_name</strong> (str, optional):\nThe attribute name representing the canyon height in metres. The default is 'Canyon height'.</li>\n<li><strong>overwrite_gpkg_layer</strong> (bool, optional):\nIf geopackage layer exists already, should this be overwritten. The default is False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(\n    self,\n    project,\n    source=None,\n    gpkg_write_path='modelled_roads.gpkg',\n    gpkg_layer_name='Modelled Roads ADMS',\n    traffic_count_point_id_col_name='TCP ID',\n    width_col_name='Width',\n    speed_col_name='Speed',\n    junction_col_name='Junction',\n    road_height_col_name='Height',\n    canyon_height_col_name='Canyon height',\n    overwrite_gpkg_layer=False\n)", "funcdef": "def"}, {"fullname": "BHAQpy.modelledroads.ModelledRoads.get_attributes_df", "modulename": "BHAQpy.modelledroads", "qualname": "ModelledRoads.get_attributes_df", "type": "function", "doc": "<p>Get attributes of drawn roads as a dataframe</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: A pandas dataframe with all attributes and values of modelled roads.</li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "BHAQpy.modelledroads.ModelledRoads.match_to_TCP", "modulename": "BHAQpy.modelledroads", "qualname": "ModelledRoads.match_to_TCP", "type": "function", "doc": "<p>Add traffic information to modelled roads by matching modelled roads to traffic count points.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>traffic_count_points</strong> (TrafficCountPoints):\nBHAQpy.TrafficCountPoints object with ID's that match the modelled roads TCP ID attribute.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>roads_TCP</strong> (pandas.DataFrame):\nDataframe containing modelled roads attributes with traffic information.</li>\n</ul>\n", "signature": "(\n    self,\n    traffic_count_points: BHAQpy.trafficcountpoints.TrafficCountPoints\n)", "funcdef": "def"}, {"fullname": "BHAQpy.modelledroads.ModelledRoads.generate_SPT", "modulename": "BHAQpy.modelledroads", "qualname": "ModelledRoads.generate_SPT", "type": "function", "doc": "<p>Format roads into SPT format and save to spt file if specified</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_file</strong> (str, optional):\nPath to save spt file. If None then no file is saved. The default is None.</li>\n<li><strong>headers_file</strong> (str, optional):\nA path to a file containing ADMS headers for an spt file. These can be automatically generated within ADMS (see manual). The default is 'ADMS_template_v5.spt'.</li>\n<li><strong>traffic_flow_year</strong> (int, optional):\nThe traffic flow year. Not strictly used in modelling (as we create an EIT) but is good for consistency. The default is 2019.</li>\n<li><strong>traffic_flow_road_type</strong> (str, optional):\nThe traffic flow road type, as specified in EFT documentation. Not strictly used in modelling (as we create an EIT) but is good for consistency. The default is 'London (Inner)'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>spt_data</strong> (pandas.DataFrame):\nDataframe of modelled roads formatted into a spt format.</li>\n</ul>\n", "signature": "(\n    self,\n    output_file=None,\n    headers_file='ADMS_template_v5.spt',\n    traffic_flow_year=2019,\n    traffic_flow_road_type='London (Inner)'\n)", "funcdef": "def"}, {"fullname": "BHAQpy.modelledroads.ModelledRoads.generate_VGT", "modulename": "BHAQpy.modelledroads", "qualname": "ModelledRoads.generate_VGT", "type": "function", "doc": "<p>Format roads into SPT format and save to spt file if specified</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_file</strong> (str, optional):\nPath to save vgt file. If None then no file is saved. The default is None.</li>\n<li><strong>headers_file</strong> (str, optional):\nA path to a file containing ADMS headers for a vgt file. These can be automatically generated within ADMS (see manual). The default is 'ADMS_template_v5.vgt'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>vgt_data</strong> (pandas.DataFrame):\nDataframe of drawn roads in a VGT format.</li>\n</ul>\n", "signature": "(self, output_file=None, headers_file='ADMS_template_v5.vgt')", "funcdef": "def"}, {"fullname": "BHAQpy.modelledroads.ModelledRoads.generate_EFT_input", "modulename": "BHAQpy.modelledroads", "qualname": "ModelledRoads.generate_EFT_input", "type": "function", "doc": "<p>Format roads into a format that can be directly copied into EFT spreadsheet</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>traffic_count_points</strong> (TrafficCountPoints):\nBHAQpy.TrafficCountPoints object with ID's that match the modelled roads TCP ID attribute.</li>\n<li><strong>road_type</strong> (str):\nThe traffic flow road type, as specified in EFT documentation. Options are Urban (Not London), Rural (Not London), Motorway (Not London), London - Central, London - Inner, London - Outer, London - Motorway</li>\n<li><strong>output_file</strong> (str, optional):\nPath to save csv file that could be copied directly into EFT. The default is None.</li>\n<li><strong>no_of_hours</strong> (int, optional):\nOperational hours of traffc. See EFT documentation. The default is 24.</li>\n<li><strong>flow_direction</strong> (TYPE, optional):\nPlaceholder for now. The default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>EFT_input_df</strong> (pandas.DataFrame):\nDataframe of roads data formatted such that it can be directly imported into EFT.</li>\n</ul>\n", "signature": "(\n    self,\n    traffic_count_points,\n    road_type,\n    output_file=None,\n    no_of_hours=24,\n    flow_direction=None\n)", "funcdef": "def"}, {"fullname": "BHAQpy.modelledroads.ModelledRoads.generate_EIT", "modulename": "BHAQpy.modelledroads", "qualname": "ModelledRoads.generate_EIT", "type": "function", "doc": "<p>Format drawn roads into EFT format. Run the EFT and save as an EIT.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>traffic_count_points</strong> (TrafficCountPoints):\nBHAQpy.TrafficCountPoints object with ID's that match the modelled roads TCP ID attribute.</li>\n<li><strong>eft_file_path</strong> (str):\nPath to an EFT spreadsheet. Download from <a href=\"https://laqm.defra.gov.uk/air-quality/air-quality-assessment/emissions-factors-toolkit/\">https://laqm.defra.gov.uk/air-quality/air-quality-assessment/emissions-factors-toolkit/</a></li>\n<li><strong>road_type</strong> (str):\nThe traffic flow road type, as specified in EFT documentation. Options are Urban (Not London), Rural (Not London), Motorway (Not London), London - Central, London - Inner, London - Outer, London - Motorway</li>\n<li><strong>area</strong> (str):\nRoad area, as specified in EFT documentation. Options are England (Not London), London, Northern Ireland, Scotland and Wales.</li>\n<li><strong>year</strong> (int):\nYear to run EFT for.</li>\n<li><strong>eit_output_path</strong> (str, optional):\nPath to save eit file to. The default is None.</li>\n<li><strong>headers_file</strong> (str, optional):\nA path to a file containing ADMS headers for a eit file. These can be automatically generated within ADMS (see manual). The default is 'ADMS_template_v5.eit'.</li>\n<li><strong>eft_output_path</strong> (str, optional):\nPath of where to save our EFT spreadsheet once it has run. The default is None.</li>\n<li><strong>traffic_format</strong> (str, optional):\nWhich traffic format to run in EFT. Options are Basic Split, Detailed Option 1, Detailed Option 2, Detailed Option 3 and Alternative Technologies. The default is 'Basic Split'.</li>\n<li><strong>pollutants</strong> (list, optional):\nWhich polluants to run EFT for. The default is ['NOx', 'PM10', 'PM2.5'].</li>\n<li><strong>eft_version</strong> (str, optional):\neft version that is being run. The default is \"11.0\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>eft_data</strong> (pandas.DataFrame):\nThe drawn roads formatted into eit format.</li>\n</ul>\n", "signature": "(\n    self,\n    traffic_count_points,\n    eft_file_path,\n    road_type,\n    area,\n    year,\n    eit_output_path=None,\n    headers_file='ADMS_template_v5.eit',\n    eft_output_path=None,\n    traffic_format='Basic Split',\n    pollutants=['NOx', 'PM10', 'PM2.5'],\n    eft_version='11.0'\n)", "funcdef": "def"}, {"fullname": "BHAQpy.modelledroads.ModelledRoads.calculate_gradients", "modulename": "BHAQpy.modelledroads", "qualname": "ModelledRoads.calculate_gradients", "type": "function", "doc": "<p>Calulate road gradient of drawn roads, based on defra digital terrain models (DTM)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>DTM_layers</strong> (str):\nLayer name of the digital terrain model to calculate gradients from.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>ModelledRoads</strong>: ModelledRoads object with gradients added into attributes.</li>\n</ul>\n", "signature": "(self, DTM_layers)", "funcdef": "def"}, {"fullname": "BHAQpy.modelledroads.run_eft", "modulename": "BHAQpy.modelledroads", "qualname": "run_eft", "type": "function", "doc": "<p></p>\n", "signature": "(\n    eft_input_list,\n    eft_file_path,\n    road_type,\n    area,\n    year,\n    eft_output_path=None,\n    traffic_format='Basic Split',\n    pollutants=['NOx', 'PM10', 'PM2.5'],\n    eft_version='11.0'\n)", "funcdef": "def"}, {"fullname": "BHAQpy.receptors", "modulename": "BHAQpy.receptors", "type": "module", "doc": "<p>Created on Mon Dec  5 14:46:57 2022</p>\n\n<p>@author: kbenjamin</p>\n"}, {"fullname": "BHAQpy.receptors.Receptors", "modulename": "BHAQpy.receptors", "qualname": "Receptors", "type": "class", "doc": "<p>Receptor object with specific functions applied to layers representing receptor points.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>source</strong> (str):\nThe data source of the traffic count points dataset</li>\n<li><strong>project</strong> (BHAQpy.AQgisProject):\nThe AQgisProject object in which the TCP layer is within</li>\n<li><strong>layer</strong> (qgis.core.QGSVectorLayer):\nThe QGIS vector layer with the traffic count points data.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>get_attributes_df()\n    get a pandas dataframe with traffic count point data.</p>\n\n<p>generate_ASP()\n    save receptors as an asp</p>\n\n<p>get_addresses()\n    Extract receptor addresses (from Nomatim)</p>\n\n<p>get_address_sample()\n    Helper function that gets the address of the first receptor. This allows the user to decide which address lines to keep and which to exclude.</p>\n\n<p>get_defra_background_concentrations()\n    Get defra background maps concentration for each receptor</p>\n"}, {"fullname": "BHAQpy.receptors.Receptors.__init__", "modulename": "BHAQpy.receptors", "qualname": "Receptors.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>project</strong> (TYPE, optional):\nBHAQpy.AQgisProject in which the layer is within. The default is None.</li>\n<li><strong>source</strong> (str):\nSource of data. A layer name within a project or a csv file.</li>\n<li><strong>id_attr_name</strong> (str, optional):\nThe layer attribute containing the ID/name of the specificed point. The default is 'ID'.</li>\n<li><strong>min_height_attr_name</strong> (str, optional):\nThe layer attribute containing the minimum height of the specificed point. The default is 'Height'.</li>\n<li><strong>max_height_attr_name</strong> (str, optional):\nThe layer attribute containing the maximum of the specificed points. \nIf None then specifed points are noly created at value specified in min_height_attr_name. \nIf not None then specified points are created at value specified in the layers attribute specified in min_height_attr_name\nIf  The default is None.</li>\n<li><strong>separation_distance_attr_name</strong> (str, optional):\nThe layer attribute containing the height separation of the specificed points. The default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(\n    self,\n    project,\n    source,\n    id_attr_name='ID',\n    min_height_attr_name='Height',\n    max_height_attr_name=None,\n    separation_distance_attr_name=None\n)", "funcdef": "def"}, {"fullname": "BHAQpy.receptors.Receptors.get_attributes_df", "modulename": "BHAQpy.receptors", "qualname": "Receptors.get_attributes_df", "type": "function", "doc": "<p>Get the attributes table as a dataframe</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: Dataframe of attributes table.</li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "BHAQpy.receptors.Receptors.generate_ASP", "modulename": "BHAQpy.receptors", "qualname": "Receptors.generate_ASP", "type": "function", "doc": "<p>Create an asp file for receptors. Compute for all heights.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>output_file_path</strong> (str):\nPath to the file at which asp file will be saved.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>asp_df</strong> (pandas.DataFrame):\nPandas dataframe containing all specified point ID, X, Y, Z.</li>\n</ul>\n", "signature": "(self, output_file_path)", "funcdef": "def"}, {"fullname": "BHAQpy.receptors.Receptors.get_addresses", "modulename": "BHAQpy.receptors", "qualname": "Receptors.get_addresses", "type": "function", "doc": "<p>Get addresses from Nomatim, using Geopy.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>excluded_address_lines_contents</strong> (list):\nNames within address to exclude. For example if you wanted to remove London, United Kingdom from every address then excluded_address_lines_contents would be set to ['London', 'United Kingdom'].</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Pandas dataframe of receptor attributes and addresses.</strong></li>\n</ul>\n", "signature": "(self, excluded_address_lines_contents=[])", "funcdef": "def"}, {"fullname": "BHAQpy.receptors.Receptors.get_address_sample", "modulename": "BHAQpy.receptors", "qualname": "Receptors.get_address_sample", "type": "function", "doc": "<p>Helper function used to determine excluded_address_lines_contents. Extract the address of the first receptor in the dataframe</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>list</strong>: Receptor ID of the first receptor and the address.</li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "BHAQpy.receptors.Receptors.get_defra_background_concentrations", "modulename": "BHAQpy.receptors", "qualname": "Receptors.get_defra_background_concentrations", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>background_region</strong> (str):\nBackground region as defined in defra background maps. Options: Greater_London, East_of_England, Midlands, Northern_England, Northern_Ireland, Scotland, Southern_England, Wales.</li>\n<li><strong>BG_maps_grid_layer</strong> (TYPE, optional):\nDESCRIPTION. The default is 'LAQM 2018 BG Ref clipped'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>Pandas dataframe containing defra background maps concentration at each receptor.</strong></li>\n</ul>\n", "signature": "(\n    self,\n    background_region,\n    BG_maps_grid_layer='LAQM 2018 BG Ref clipped'\n)", "funcdef": "def"}, {"fullname": "BHAQpy.trafficcountpoints", "modulename": "BHAQpy.trafficcountpoints", "type": "module", "doc": "<p>Created on Wed Mar 30 11:29:05 2022</p>\n\n<p>@author: kbenjamin</p>\n"}, {"fullname": "BHAQpy.trafficcountpoints.TrafficCountPoints", "modulename": "BHAQpy.trafficcountpoints", "qualname": "TrafficCountPoints", "type": "class", "doc": "<p>An object of traffic count points. These could be supplied from a transport consultant or from open sources such as DfT or LAEI.\nThe primary use of traffic cout points is to match them to a ModelledRoads object such that the traffic data is joined to the road geometry information.</p>\n\n<h6 id=\"attributes\">Attributes</h6>\n\n<ul>\n<li><strong>source</strong> (str):\nThe data source of the traffic count points dataset</li>\n<li><strong>project</strong> (BHAQpy.AQgisProject):\nThe AQgisProject object in which the TCP layer is within</li>\n<li><strong>layer</strong> (qgis.core.QGSVectorLayer):\nThe QGIS vector layer with the traffic count points data.</li>\n</ul>\n\n<h6 id=\"methods\">Methods</h6>\n\n<p>get_attributes_df()\n    get a pandas dataframe with traffic count point data.</p>\n"}, {"fullname": "BHAQpy.trafficcountpoints.TrafficCountPoints.__init__", "modulename": "BHAQpy.trafficcountpoints", "qualname": "TrafficCountPoints.__init__", "type": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source</strong> (str):\nSource of data. A layer name within a project or a csv file.</li>\n<li><strong>tcp_id_col_name</strong> (str, optional):\nThe attribute name storing the ID of the count point. The default is 'ID'.</li>\n<li><strong>total_AADT_col_name</strong> (TYPE, optional):\nThe attribute name storing the total AADT of the count point. The default is 'Tot_AADT19'.</li>\n<li><strong>HDV_percentage_col_name</strong> (TYPE, optional):\nThe attribute name storing the HD percentage of the count point. The default is 'HDV %'.</li>\n<li><strong>HDV_AADT_col_name</strong> (TYPE, optional):\nThe attribute name storing the HDV AADT of the count point. The default is 'HDV AADT'.</li>\n<li><strong>speed_col_name</strong> (TYPE, optional):\nThe attribute name storing the speed of the count point in kph. The default is 'Sp_kph'.</li>\n<li><strong>project</strong> (TYPE, optional):\nBHAQpy.AQgisProject in which the layer is within. The default is None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None.</strong></li>\n</ul>\n", "signature": "(\n    self,\n    source,\n    tcp_id_col_name='ID',\n    total_AADT_col_name='Tot_AADT19',\n    HDV_percentage_col_name='HDV %',\n    HDV_AADT_col_name='HDV AADT',\n    speed_col_name='Sp_kph',\n    project=None\n)", "funcdef": "def"}, {"fullname": "BHAQpy.trafficcountpoints.TrafficCountPoints.get_attributes_df", "modulename": "BHAQpy.trafficcountpoints", "qualname": "TrafficCountPoints.get_attributes_df", "type": "function", "doc": "<p>Get the attributes table as a dataframe</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>pandas.DataFrame</strong>: Dataframe of attributes table.</li>\n</ul>\n", "signature": "(self)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();